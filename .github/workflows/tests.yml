name: Test Matrix

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        cxx_standard: ["20"]
        include:
          - c_compiler: gcc
            cxx_compiler: g++
          - c_compiler: clang
            cxx_compiler: clang++

    name: ${{ matrix.c_compiler }} - ${{ matrix.build_type }} - ${{ matrix.os }} - c++${{ matrix.cxx_standard }}

    steps:
    - uses: actions/checkout@v3

    - uses: seanmiddleditch/gha-setup-ninja@v3

    - name: "Linux: get build dependencies"
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      run: |
        sudo apt-get update
        sudo apt-get install -y catch2

    - name: "MacOS: get build dependencies"
      if: ${{ startsWith(matrix.os, 'macos') }}
      run: |
        brew install catch2

    - name: Install LLVM and Clang
      if: ${{ matrix.c_compiler == 'clang' && matrix.os != 'macos-latest' }}
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "16.0"
    - name: Install LLVM and Clang
      if: ${{ matrix.c_compiler == 'clang' && matrix.os == 'macos-latest' }}
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "15.0"

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -G Ninja
        -DCMAKE_CXX_STANDARD=${{ matrix.cxx_standard }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cxx_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
